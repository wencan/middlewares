// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/wencan/middlewares (interfaces: LoggingLogger)

// Package mock_logging is a generated GoMock package.
package mock_logging

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockLoggingLogger is a mock of LoggingLogger interface
type MockLoggingLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggingLoggerMockRecorder
}

// MockLoggingLoggerMockRecorder is the mock recorder for MockLoggingLogger
type MockLoggingLoggerMockRecorder struct {
	mock *MockLoggingLogger
}

// NewMockLoggingLogger creates a new mock instance
func NewMockLoggingLogger(ctrl *gomock.Controller) *MockLoggingLogger {
	mock := &MockLoggingLogger{ctrl: ctrl}
	mock.recorder = &MockLoggingLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoggingLogger) EXPECT() *MockLoggingLoggerMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockLoggingLogger) Write(arg0 *http.Request, arg1, arg2 int, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockLoggingLoggerMockRecorder) Write(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockLoggingLogger)(nil).Write), arg0, arg1, arg2, arg3)
}
